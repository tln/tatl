{
    "def=\"foo\"": "name    = py/js: foo\n          lvars: foo\nargs    = py: **_kw\n          js: \nresult  = None\nfilters = []", 
    "def=\"name(*)\"": "name    = py/js: name\n          lvars: name\nargs    = py: **_kw\n          js: \nresult  = None\nfilters = []", 
    "def=\"name(arg) = expr\"": "name    = py/js: name\n          lvars: name\nargs    = py: arg=None, **_kw\n          js: arg\n          lvars: arg\nresult  = py/js: expr\n          rvars: expr\nfilters = []", 
    "def=\"name(arg, arg) |filter\"": "name       = py/js: name\n             lvars: name\nargs       = py: arg=None, arg=None, **_kw\n             js: arg, arg\n             lvars: arg,arg\nresult     = None\nfilters[0] = py/js: filter\n             rvars: filter", 
    "def=\"name(arg, arg)\"": "name    = py/js: name\n          lvars: name\nargs    = py: arg=None, arg=None, **_kw\n          js: arg, arg\n          lvars: arg,arg\nresult  = None\nfilters = []", 
    "for=\". in expr\"": "set  = []\nstmt = py: for dot in _.iter(expr):\n       js: for (_i in (_tmp4 = expr)) { dot = _tmp4[_i];\n       lvars: dot,_tmp4 rvars: expr", 
    "for=\"expr\"": "set  = []\nstmt = py: for dot in _.iter(expr):\n       js: for (_i in (_tmp1 = expr)) { dot = _tmp1[_i];\n       lvars: dot,_tmp1 rvars: expr", 
    "for=\"key, value in expr\"": "set  = []\nstmt = py: for key, value in _.items(expr):\n       js: for (var _tmp2i = 0, _tmp2k = _.keys(_tmp2 = expr), _tmp2n = _tmp2k.length; _tmp2i < _tmp2n; _tmp2i++) {\n           value = _tmp2[key = _tmp2k[_tmp2i]];\n       lvars: key,value,_tmp2 rvars: expr", 
    "for=\"var1 = expr; key in expr\"": "set[0] = py/js: var1 = expr\n         lvars: var1 rvars: expr\nstmt   = py: for key in _.iter(expr):\n         js: for (_i in (_tmp3 = expr)) { key = _tmp3[_i];\n         lvars: key,_tmp3 rvars: expr", 
    "for=\"var1 in expr\"": "set  = []\nstmt = py: for var1 in _.iter(expr):\n       js: for (_i in (_tmp0 = expr)) { var1 = _tmp0[_i];\n       lvars: var1,_tmp0 rvars: expr", 
    "if=\"expr\"": "set  = []\ntest = py: bool(expr)\n       js: tatlrt.bool(expr)\n       rvars: expr", 
    "if=\"var1 = expr; expr\"": "set[0] = py/js: var1 = expr\n         lvars: var1 rvars: expr\ntest   = py: bool(expr)\n         js: tatlrt.bool(expr)\n         rvars: expr", 
    "param=\"var1\"": "[<py/js: var1 lvars: var1>]", 
    "param=\"var1, var1\"": "[<py/js: var1 lvars: var1>, <py/js: var1 lvars: var1>]", 
    "set=\"var1\"": "var     = py/js: var1\n          lvars: var1\nfilters = []", 
    "set=\"var1|bar\"": "var        = py/js: var1\n             lvars: var1\nfilters[0] = py/js: bar\n             rvars: bar", 
    "set=\"var1|module::foo\"": "var        = py/js: var1\n             lvars: var1\nfilters[0] = py/js: _.load('module', ['foo'])", 
    "set=\"var1|trim\"": "var        = py/js: var1\n             lvars: var1\nfilters[0] = py/js: tatlrt.filters.trim", 
    "use=\"template::html\"": "set     = []\npath    = py/js: _.load('template', ['html'])\narglist = None", 
    "use=\"template::html(expr, expr)\"": "set        = []\npath       = py/js: _.load('template', ['html'])\narglist[0] = py/js: expr\n             rvars: expr\narglist[1] = py/js: expr\n             rvars: expr", 
    "use=\"var1 = expr; var12 = expr; template::html\"": "set[0]  = py/js: var1 = expr\n          lvars: var1 rvars: expr\nset[1]  = py/js: var12 = expr\n          lvars: var12 rvars: expr\npath    = py/js: _.load('template', ['html'])\narglist = None", 
    "{ a? }": "set   = []\nexprs = []\nemit  = py: bool(a)\n        js: tatlrt.bool(a)\n        rvars: a\nrest  = ", 
    "{\"1\"}": "set   = []\nexprs = []\nemit  = py/js: \"1\"\nrest  = ", 
    "{\"foo\" ~ /bar/ ? yes}": "set   = []\nexprs = []\nemit  = py: yes if _.search('bar', \"foo\") else None\n        js: _.search(/bar/, \"foo\") ? yes : null\n        rvars: yes\nrest  = ", 
    "{*:foo}": "set   = []\nexprs = []\nemit  = py: foo, _emit = _.star()\n        js: foo = _.star()\n        type: placeholder lvars: foo\nrest  = ", 
    "{++:foo}": "set   = []\nexprs = []\nemit  = py: foo, _emit = _.plusplus()\n        js: foo = _.plusplus()\n        type: placeholder lvars: foo\nrest  = ", 
    "{.[0]}": "set   = []\nexprs = []\nemit  = py/js: _.get1(dot, 0)\n        rvars: dot\nrest  = ", 
    "{.}": "set   = []\nexprs = []\nemit  = py/js: dot\n        rvars: dot\nrest  = ", 
    "{0..5}": "set   = []\nexprs = []\nemit  = py: tatlrt.range_excl(0, 5)\n        js: tatlrt.range(0, 5, false)\nrest  = ", 
    "{1 lt 2 ? 1}": "set   = []\nexprs = []\nemit  = py: 1 if 1 < 2 else None\n        js: 1 < 2 ? 1 : null\nrest  = ", 
    "{1 lt x le y ?: 12}": "set   = []\nexprs = []\nemit  = py: (1 < x <= y or 12)\n        js: ((1 < (_tmp1 = x) && _tmp1 <= y) || (12))\n        rvars: x,y\nrest  = ", 
    "{1...5}": "set   = []\nexprs = []\nemit  = py: tatlrt.range_incl(1, 5)\n        js: tatlrt.range(1, 5, true)\nrest  = ", 
    "{1}": "set   = []\nexprs = []\nemit  = py/js: 1\nrest  = ", 
    "{[*a]}": "set   = []\nexprs = []\nemit  = py/js: a\n        type: starexp rvars: a\nrest  = ", 
    "{[1,*a,1]}": "set   = []\nexprs = []\nemit  = py/js: [1]+a+[1]\n        rvars: a\nrest  = ", 
    "{[1,*a]}": "set   = []\nexprs = []\nemit  = py/js: [1]+a\n        rvars: a\nrest  = ", 
    "{[1]}": "set   = []\nexprs = []\nemit  = py/js: [1]\nrest  = ", 
    "{[var1, \"val\", 3, *0..9]}": "set   = []\nexprs = []\nemit  = py: [var1, \"val\", 3]+tatlrt.range_excl(0, 9)\n        js: [var1, \"val\", 3]+tatlrt.range(0, 9, false)\n        rvars: var1\nrest  = ", 
    "{[var1, \"val\", 3]}": "set   = []\nexprs = []\nemit  = py/js: [var1, \"val\", 3]\n        rvars: var1\nrest  = ", 
    "{a !~ /bar/ ? yes}": "set   = []\nexprs = []\nemit  = py: yes if not _.search('bar', a) else None\n        js: !_.search(/bar/, a) ? yes : null\n        rvars: a,yes\nrest  = ", 
    "{a == 2 ? \"couple\" : \"few\"}": "set   = []\nexprs = []\nemit  = py: \"couple\" if a == 2 else \"few\"\n        js: a == 2 ? \"couple\" : \"few\"\n        rvars: a\nrest  = ", 
    "{a ?: 1}": "set   = []\nexprs = []\nemit  = py: (bool(a) or 1)\n        js: ((tatlrt.bool(a)) || (1))\n        rvars: a\nrest  = ", 
    "{a ~! /bar/ ? yes}": "set   = []\nexprs = []\nemit  = py: yes if not _.search('bar', a) else None\n        js: !_.search(/bar/, a) ? yes : null\n        rvars: a,yes\nrest  = ", 
    "{expr |afilter}": "set   = []\nexprs = []\nemit  = py/js: afilter( expr )\n        rvars: expr,afilter\nrest  = ", 
    "{macro(var1, var1)}": "set   = []\nexprs = []\nemit  = py/js: macro(var1, var1)\n        rvars: macro,var1,var1\nrest  = ", 
    "{template::var1}": "set   = []\nexprs = []\nemit  = py/js: _.load('template', ['var1'])\nrest  = ", 
    "{test ? value : value}": "set   = []\nexprs = []\nemit  = py: value if bool(test) else value\n        js: tatlrt.bool(test) ? value : value\n        rvars: test,value,value\nrest  = ", 
    "{var1 = \"value\"}}": "set[0] = py/js: var1 = \"value\"\n         lvars: var1\nexprs  = []\nemit   = None\nrest   = }", 
    "{var1 = .path(); var12}": "set[0] = py/js: var1 = _.get1(dot, 'path')()\n         lvars: var1 rvars: dot\nexprs  = []\nemit   = py/js: var12\n         rvars: var12\nrest   = ", 
    "{var1 = expr}": "set[0] = py/js: var1 = expr\n         lvars: var1 rvars: expr\nexprs  = []\nemit   = None\nrest   = ", 
    "{var1 = path}": "set[0] = py/js: var1 = path\n         lvars: var1 rvars: path\nexprs  = []\nemit   = None\nrest   = ", 
    "{var1 ?= default}": "set[0] = py: var1 = var1 or default\n         js: var1 = var1 || default\n         rvars: var1,default\nexprs  = []\nemit   = None\nrest   = ", 
    "{var1.var1}": "set   = []\nexprs = []\nemit  = py/js: _.get1(var1, 'var1')\n        rvars: var1\nrest  = ", 
    "{var1[0]}": "set   = []\nexprs = []\nemit  = py/js: _.get1(var1, 0)\n        rvars: var1\nrest  = ", 
    "{var1[var1]}": "set   = []\nexprs = []\nemit  = py/js: _.get1(var1, var1)\n        rvars: var1,var1\nrest  = ", 
    "{var1}": "set   = []\nexprs = []\nemit  = py/js: var1\n        rvars: var1\nrest  = ", 
    "{{a:1,b:\"2\",*c,d:[1,2,3]}}": "set   = []\nexprs = []\nemit  = py/js: merge({'a': 1, 'b': \"2\"}, c, {'d': [1, 2, 3]})\n        rvars: c\nrest  = ", 
    "{{a:1}}": "set   = []\nexprs = []\nemit  = py/js: {'a': 1}\nrest  = ", 
    "{{name: var11, name2: \"value\", *foo, name3: \"value\"}}": "set   = []\nexprs = []\nemit  = py/js: merge({'name': var11, 'name2': \"value\"}, foo, {'name3': \"value\"})\n        rvars: var11,foo\nrest  = ", 
    "{{name: var11, name2: \"value\"}}": "set   = []\nexprs = []\nemit  = py/js: {'name': var11, 'name2': \"value\"}\n        rvars: var11\nrest  = "
}