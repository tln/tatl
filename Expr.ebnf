defAttr = defExpr $ ;
forAttr = forExpr $ ;
ifAttr = ifExpr $ ;
paramAttr = paramExpr $ ;
setAttr = setExpr $ ;
useAttr = useExpr $ ;


attrs = 'def="' @defExpr '"' 
	| 'for="' @forExpr '"'
    | 'if="' @ifExpr '"' 
	| 'param="' @paramExpr '"'
	| 'set="' @setExpr '"' 
	| 'use="' @useExpr '"' 
	| top ;
defExpr = name:NAME [args:arglist] ['=' result:expr] {filter+:filter} ;
	arglist = '(' [@+:arg {',' @+:arg} [',']] ')' ;
	arg = @NAME | @'*' ;
setExpr = lvar ;
forExpr = {set+:set ';'} [n1:lvar [',' n2:lvar] 'in'] expr:expr ;
ifExpr = {set+:set ';'} test:test ;
paramExpr = @+:lvar {',' @+:lvar} ;
useExpr = {set+:set ';'} path:path [arglist:callargs];
	callargs = '(' [@+expr {',' @+expr} [',']] ')';

top = '{' {set+:set ';'} (set+:set | ({exprs+:expr ';'} [emit:topemitexpr])) '}';

	set = lset | setif ;
	lset = lvar:lvar '=' expr:expr ;
		lvar = NAME ;
	setif = var:NAME ('=?'|'?=') expr:expr ;

	topemitexpr = placeholder | filtexp ;
		filtexp = expr:expr {filter+:filter} ;
		filter = '|' (  @call | @path | @string) ;
		placeholder = @('*' | '++') ':' @NAME ;


	expr = ternary | range | simpleexpr;

		ternary = test:test ('?' true:expr [':' false:expr] | '?:' false:expr);
(*expr*)	test = regex | comp ;   
				regex = expr:simpleexpr op:('~!'|'!~'|'~') re:relit ;
					relit = REGEX ;
				comp = @+:simpleexpr ( {@+:compop @+:simpleexpr}+ 
				                     | [@+:eqop @+:simpleexpr] 
									 ) ;
					eqop = '==' | '!=' | 'eq' | 'ne';
					compop = 'le'|'ge'|'gt'|'lt'|'<='|'=<'|'<'|'>='|'=>'|'>';

		range = simpleexpr (  '...' | '..' ) simpleexpr ;

		simpleexpr = call | path | value | list | map ;

(*expr*)	call = fn:path '(' [arg+:expr {',' arg+:expr} [',']] ')' ;

			path = path:(externalPath | dotPath | dottedPath) lookup:[lookup] ;
				dottedPath =  @+:NAME {'.' @+:NAME}* ;
				dotPath = @+:'.' [@+:NAME {'.' @+:NAME}*] ;
				externalPath = module:NAME '::' path+:NAME {'.' path+:NAME} ;
(*simpleexpr*)	lookup = '[' @simpleexpr ']' ;

			value = number | string ;
				number = NUMBER ;
				string = STRING ;


(*expr*)	list = '[' [@+:(expr|starexp) {',' @+:(expr|starexp)} [',']]  ']' ;
(*expr*)		starexp = '*' @expr ;

			map = '{' [@+:(member|starexp) {',' @+:(member|starexp)}] '}' ;
				member = ( nkey:NAME | skey:STRING) ':' val:expr ;

REGEX = ?/[/].*?[/]/?;
NAME = ?/[a-zA-Z][a-zA-Z0-9_]*/? ;
INT = ?/[0-9]+/? ;
DOT = '.' ;
DOTS =   DOT | '.' {'.'}+ ;
NUMBER = ?/-?[0-9]+([.][0-9]+([eE][+-]?[0-9]+)?)?/? ;
WS = (  ' ' | '\t') ;
NL =   '\n' | '\r' ;
STRING = ?/(['"]).*?\1/?;
PYEXPR = '(' O [PYEXPR] O ')';
O = ?/[^()]*/?;

